let Notes,BaseSetup,BuildInserts,FileOutput;_067‍.x([["FileConstructor",()=>FileConstructor]]);_067‍.w("./notes.js",[["Notes",["Notes"],function(v){Notes=v}]]);_067‍.w("./basesetup.js",[["BaseSetup",["BaseSetup"],function(v){BaseSetup=v}]]);_067‍.w("./buildInserts.js",[["BuildInserts",["BuildInserts"],function(v){BuildInserts=v}]]);_067‍.w("./fileoutput.js",[["FileOutput",["FileOutput"],function(v){FileOutput=v}]]);




       class FileConstructor {
    buildNewFile(request, newDate, sqlCurrentNumber, defaultBoolean) {
        
        var newfile = []

        var notesArray = Notes.prototype.createNotes(request, defaultBoolean)
        
        notesArray.forEach(function(note) {
            newfile.push(note)
        })


        if (defaultBoolean) {
            var baseSetupArray = BaseSetup.prototype.createBaseInserts(request, newDate)
            baseSetupArray.forEach(function(baseSetup) {
                newfile.push(baseSetup)
            })
        }

        if (!defaultBoolean) {
            var insertsArray = BuildInserts.prototype.createInsertStatements(newDate, sqlCurrentNumber, request)
            insertsArray.forEach(function(insert) {
                newfile.push(insert)
            })
        }
        
        newfile.push("\nCOMMIT;")
        if (defaultBoolean) {
            newfile.push("\nEND;")
        }

        let filenameArray = notesArray[0].split("\\");
        let filename = filenameArray[2].substring(0, filenameArray[2].length - 4)

        FileOutput.prototype.createFile(newfile, request, filename)
    }
}

module.exports = {
    FileConstructor
}